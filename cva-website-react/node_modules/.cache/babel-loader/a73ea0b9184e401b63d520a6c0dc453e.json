{"ast":null,"code":"import _objectSpread from \"E:\\\\IT\\\\B302 Projects\\\\cva-website-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"E:\\\\IT\\\\B302 Projects\\\\cva-website-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\IT\\\\B302 Projects\\\\cva-website-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport AuthService from '../services/AuthService';\nimport Axios from 'axios';\n\nvar RequestHelper =\n/*#__PURE__*/\nfunction () {\n  function RequestHelper() {\n    _classCallCheck(this, RequestHelper);\n  }\n\n  _createClass(RequestHelper, [{\n    key: \"isFormData\",\n    value: function isFormData(resource) {\n      return resource instanceof FormData;\n    }\n  }, {\n    key: \"post\",\n    value: function post(uri, data) {\n      return this.request('POST', uri, data);\n    }\n  }, {\n    key: \"patch\",\n    value: function patch(uri, data) {\n      return this.request('PATCH', uri, data);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy(uri) {\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.request('DELETE', uri, data);\n    }\n  }, {\n    key: \"get\",\n    value: function get(url) {\n      return this.request('GET', url, {});\n    }\n  }, {\n    key: \"request\",\n    value: function request(method, url, data) {\n      var _this = this;\n\n      if (this.isFormData(data)) {\n        data.append('_method', method);\n        method = 'POST';\n      }\n\n      return new Promise(function (resolve, reject) {\n        return Axios.request({\n          method: method,\n          url: url,\n          data: data,\n          headers: _this.getHeadersForData(data)\n        }).then(function (res) {\n          return resolve(res.data);\n        }).catch(function (err) {\n          reject(err.response.data);\n        });\n      });\n    }\n  }, {\n    key: \"getHeadersForData\",\n    value: function getHeadersForData(data) {\n      var isFormData = this.isFormData(data);\n      var authorizationHeaders = AuthService.isAuthenticated() ? {\n        'Authorization': \"Bearer \".concat(AuthService.getToken())\n      } : {};\n      return _objectSpread({\n        'Content-Type': isFormData ? 'multipart/form-data' : 'application/json',\n        'Accept': 'application/json'\n      }, authorizationHeaders);\n    }\n  }], [{\n    key: \"convertToFormData\",\n    value: function convertToFormData(object) {\n      var formData = new FormData();\n      Object.keys(object).filter(function (key) {\n        return object[key] !== null && object[key] !== '';\n      }).forEach(function (key) {\n        var value = object[key];\n\n        if (Array.isArray(value)) {\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = value[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var item = _step.value;\n              formData.append(\"\".concat(key, \"[]\"), item);\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          return;\n        }\n\n        formData.append(key, value);\n      });\n      return formData;\n    }\n  }]);\n\n  return RequestHelper;\n}();\n\nexport default RequestHelper;","map":{"version":3,"sources":["E:\\IT\\B302 Projects\\cva-website-react\\src\\helpers\\RequestHelper.js"],"names":["AuthService","Axios","RequestHelper","resource","FormData","uri","data","request","url","method","isFormData","append","Promise","resolve","reject","headers","getHeadersForData","then","res","catch","err","response","authorizationHeaders","isAuthenticated","getToken","object","formData","Object","keys","filter","key","forEach","value","Array","isArray","item"],"mappings":"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","sourcesContent":["import AuthService from '../services/AuthService'\r\nimport Axios from 'axios';\r\n\r\nclass RequestHelper {\r\n    static convertToFormData (object) {\r\n        const formData = new FormData();\r\n        Object.keys(object).filter(key => object[key] !== null && object[key] !== '').forEach(key => {\r\n            let value = object[key]\r\n            if (Array.isArray(value)) {\r\n                for (const item of value) {\r\n                    formData.append(`${key}[]`, item)\r\n                }\r\n                return\r\n            }\r\n\r\n            formData.append(key, value)\r\n        });\r\n\r\n        return formData\r\n    }\r\n\r\n    isFormData (resource) {\r\n        return resource instanceof FormData\r\n    }\r\n\r\n    post (uri, data) {\r\n        return this.request('POST', uri, data);\r\n    }\r\n\r\n    patch (uri, data) {\r\n        return this.request('PATCH', uri, data);\r\n    }\r\n\r\n    destroy (uri, data = {}) {\r\n        return this.request('DELETE', uri, data);\r\n    }\r\n\r\n    get (url) {\r\n        return this.request('GET', url, {});\r\n    }\r\n\r\n    request (method, url, data) {\r\n        if (this.isFormData(data)) {\r\n            data.append('_method', method);\r\n            method = 'POST';\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            return Axios.request({\r\n                method,\r\n                url,\r\n                data,\r\n                headers: this.getHeadersForData(data)\r\n            }).then(res => resolve(res.data))\r\n                .catch(err => {\r\n                    reject(err.response.data)\r\n                })\r\n        })\r\n    }\r\n\r\n    getHeadersForData (data) {\r\n        const isFormData = this.isFormData(data);\r\n\r\n        const authorizationHeaders = AuthService.isAuthenticated()\r\n            ? {'Authorization': `Bearer ${AuthService.getToken()}`}\r\n            : {};\r\n\r\n        return {\r\n            'Content-Type': isFormData ? 'multipart/form-data' : 'application/json',\r\n            'Accept': 'application/json',\r\n            ...authorizationHeaders\r\n        }\r\n    }\r\n}\r\n\r\nexport default RequestHelper\r\n"]},"metadata":{},"sourceType":"module"}